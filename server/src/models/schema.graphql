type Query {
  user(id: ID!): User
  users: [User]
  # projects: ProjectConnection
}

type Mutation {
  createUser(
    first_name: String!
    last_name: String!
    email: String!
    password: String!
  ): User
  # createProject(name: String!, description: String!): Project
}

scalar Date

type PageInfo {
  endCursor: String
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
}

type User {
  id: ID
  first_name: String
  last_name: String
  projects: [Project]
  workspaces: [Workspace]
  created_issues: [Issue]
  assigned_issues: [Issue]
  created_at: Date
  updated_at: Date
}

type Project {
  id: ID
  name: String
  created_at: Date
  updated_at: Date
  url: String
  creator: User
  description: String
  image: String
  workspaces: [Workspace]
}
type ProjectConnection {
  edges: [ProjectEdge]
  pageInfo: PageInfo!
}
type ProjectEdge {
  cursor: String!
  node: Project!
}

type Workspace {
  id: ID
  name: String
  url: String
  description: String
  creator: User
  issues: [Issue]
}

type Issue {
  id: ID
  name: String
  creator: User
  assigned_to: [User]
  issue_type: IssueType
}

enum IssueType {
  FEATURE
  CHANGE
  BUG
  TASK
}

enum IssueLevel {
  LOW
  MEDIUM
  HIGH
}
